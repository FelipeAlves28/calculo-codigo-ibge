{
  "_from": "@roit/roit-response-handler",
  "_id": "@roit/roit-response-handler@0.0.10",
  "_inBundle": false,
  "_integrity": "sha512-Q7E13xL0ebEQLpJ82T3Dkt8C/a+quiiwmKErE3f1hn3JjLnThqmdSp65h1B8LrRUfnd0KxWtYuOlOa2keTFWBw==",
  "_location": "/@roit/roit-response-handler",
  "_phantomChildren": {
    "@types/color-name": "1.1.1"
  },
  "_requested": {
    "escapedName": "@roit%2froit-response-handler",
    "fetchSpec": "latest",
    "name": "@roit/roit-response-handler",
    "raw": "@roit/roit-response-handler",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@roit",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@roit/roit-response-handler/-/roit-response-handler-0.0.10.tgz",
  "_shasum": "8ea783f9fcface2bf49a8e5807d49fce50b829d8",
  "_shrinkwrap": null,
  "_spec": "@roit/roit-response-handler",
  "_where": "/home/felipe-alves/Projects/calculo-codigo-ibge",
  "author": {
    "name": "ROIT"
  },
  "bugs": {
    "url": "https://github.com/roitinnovation/roit-response-handler/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "chalk": "^3.0.0",
    "express": "^4.17.1",
    "reflect-metadata": "^0.1.13"
  },
  "deprecated": false,
  "description": "ROIT response handler simplifies error handling and standardizes API responses",
  "devDependencies": {
    "@types/chai": "^4.2.0",
    "@types/express": "^4.0.33",
    "@types/mocha": "^5.2.7",
    "@types/node": "^6.0.46",
    "chai": "^4.2.0",
    "mocha": "^6.2.0",
    "ts-node": "^8.3.0",
    "typescript": "^2.9.2"
  },
  "homepage": "https://github.com/roitinnovation/roit-response-handler#readme",
  "keywords": [
    "express error api",
    "express error handle",
    "express exception handle",
    "express response api",
    "typescript error api",
    "typescript error handle",
    "typescript exception handle",
    "typescript response api"
  ],
  "main": "dist/index.js",
  "name": "@roit/roit-response-handler",
  "optionalDependencies": {},
  "readme": "# ROIT response handler\nROIT response handler simplifies error handling and standardizes API responses\n\n## Configure tsconfig\n\nAdd in file tsconfig.json attributes \"experimentalDecorators\" and \"emitDecoratorMetadata\"\n\n```JSON\n{\n  \"compilerOptions\": {\n    [...]\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    [...]\n}\n```\n\n## Create the class for error handle\n\n```javascript\n\nimport { ErrorHandle, ErrorHandleDafault, BusinessError, SystemError, ErrorResponse } from \"@roit/roit-response-handler\";\n\nexport class ErrorsHandle {\n\n    /** \n     * 1. The decorator @ErrorHandle mapping your treatment by first arg (ex: BusinessError)\n     * 2. Communicates with Express instances\n     * 3. Signature ->  (err: any, req: Request, res: Response, next: NextFunction)\n    */\n    @ErrorHandle\n    businessError(ex: BusinessError, req: Request, res: Response) {\n      // your log\n      res.status(400).send(ErrorResponse(ex.message))\n    }\n\n    @ErrorHandle\n    systemError(ex: SystemError, req: Request, res: Response) {\n      // your log\n      res.status(500).send(ErrorResponse(ex.message))\n    }\n\n    /** \n     * 1. The decorator @ErrorHandleDafault is execute while the Error not mapping\n     * 2. Communicates with Express instances\n     * 3. Signature ->  (err: any, req: Request, res: Response, next: NextFunction)\n     * 4. If not mapped internal treatment is performed\n    */\n    @ErrorHandleDafault\n    default(ex: Error, req: Request, res: Response) {\n       // your log \n      res.status(400).send(ErrorResponse(\"Error not mapping\"))\n    }\n\n}\n\n```\n\n## Express integration\n\n```javascript\n\n// Step by step\nimport { Handle, modelMapperMiddleware } from \"@roit/roit-response-handler\"\n\n// Step 1: Register middleware\n// NOTE: Always register this middleware last\napp.use(modelMapperMiddleware)\n\n// Step 2: Register handle\nHandle.register(new ErrorsHandle)\n\n// Step 3: If your router receives an asynchronous function, register asyncDispatcher\nrouter.post('/', Handle.asyncDispatcher, async (req, res) => {....\n\n// In @overnightjs use\n@Post()\n@Wrapper(Handle.asyncDispatcher)\nprivate async example(req: ModelMapperRequest, res: Response) {...\n\n```\n\n\n## Response models\n\n```javascript\n\nimport { OkResponse, ErrorResponse } from \"@roit/roit-response-handler\"\n\n// Error\n// Signature -> (message: string, erros?: Array<any>, token?: string)\nres.status(403).send(ErrorResponse(\"Auth invalid, verify your credentials!\"));\n\n// Success\n// Signature -> (data: any, message?: string, token?: string)\nres.send(OkResponse({}))\n\n```\n\n##Response Format\n\n```\nSUCCESS\nContent-Type: application/json\n\n{\n\t\"status\": \"SUCCESS\",\n\t\"message\": \"User successfully created.\",\n\t\"data\": { ... },\n\t\"errors\": null\n}\n```\n\n```\nERROR\nContent-Type: application/json\n\n{\n\t\"status\": \"ERROR\",\n\t\"message\": \"Error in create user.\",\n\t\"data\": null,\n\t\"errors\": [\n\t\t{\n\t\t\t\"code\": XXX,\n\t\t\t\"message\": \"Error in execute request!\"\n\t\t}\n\t]\n}\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/roitinnovation/roit-response-handler.git"
  },
  "scripts": {
    "build": "tsc",
    "deploy": "npm run build && npm test && npm publish --access public --scope=roit",
    "test": "mocha --timeout 15000 -r ts-node/register test/**/*.spec.ts"
  },
  "types": "src/index.ts",
  "version": "0.0.10"
}
